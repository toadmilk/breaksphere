// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id        String   @id @default(uuid())
  userId    String
  content   String
  createdAt DateTime @default(now())
  likes     Like[]
  file      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([createdAt, id])
  @@index([userId])
}

model Like {
  userId String
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.VarChar(50)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?   @db.VarChar(150)
  location      String?   @db.VarChar(50)
  website       String?   @db.VarChar(60)
  accounts      Account[]
  sessions      Session[]

  // Non-Next Auth
  posts     Post[]
  likes     Like[]
  followers User[] @relation(name: "Followers")
  following User[] @relation(name: "Followers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
